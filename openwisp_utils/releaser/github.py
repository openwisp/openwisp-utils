import uuid

import requests

from .utils import SkipSignal, retryable_request


class GitHub:
    """A client for interacting with the GitHub API."""

    def __init__(self, token, repo):
        if not token:
            raise ValueError("GitHub token is required.")
        if not repo:
            raise ValueError("GitHub repository name (e.g., 'owner/repo') is required.")
        self.token = token
        self.repo = repo
        self.base_url = f"https://api.github.com/repos/{self.repo}"
        self.headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json",
        }

    def create_pr(self, head, base, title):
        """Creates a pull request on GitHub."""
        url = f"{self.base_url}/pulls"
        payload = {
            "title": title,
            "head": head,
            "base": base,
            "body": "**Note**: This PR was automatically generated by the `openwisp-utils` releaser tool.",
        }
        response = retryable_request(
            url=url, method="post", headers=self.headers, json=payload
        )
        return response.json()["html_url"]

    def is_pr_merged(self, pr_url):
        """Checks if a pull request has been merged."""
        pr_number = pr_url.split("/")[-1]
        url = f"{self.base_url}/pulls/{pr_number}"
        response = retryable_request(method="get", url=url, headers=self.headers)
        return response.json().get("merged", False)

    def create_release(self, tag_name, title, body):
        """Creates a draft release on GitHub."""
        url = f"{self.base_url}/releases"
        payload = {
            "tag_name": tag_name,
            "name": title,
            "body": body,
            "draft": True,
            "prerelease": True,
        }
        response = retryable_request(
            method="post", url=url, headers=self.headers, json=payload
        )
        return response.json()["html_url"]

    def check_pr_creation_permission(self) -> bool:
        """Checks for PR creation permissions."""
        try:
            repo_resp = retryable_request(
                method="get", url=self.base_url, headers=self.headers
            )
            base = repo_resp.json().get("default_branch", "master")

            me_resp = retryable_request(
                method="get", url="https://api.github.com/user", headers=self.headers
            )
            login = me_resp.json()["login"]

            url = f"{self.base_url}/pulls"
            fake_branch = f"__perm_probe_{uuid.uuid4().hex[:8]}__"
            payload = {
                "title": "Permission Probe",
                "head": f"{login}:{fake_branch}",
                "base": base,
                "body": "This is a temporary probe to check permissions and should not be merged.",
            }

            # This request is expected to fail with 422 if permissions are correct
            response = requests.post(url=url, headers=self.headers, json=payload)
            return response.status_code == 422
        except SkipSignal:
            print(
                "Skipped permission check due to network issues. Continuing, but might fail later."
            )
            return True  # Assume permissions are correct to proceed
        except requests.RequestException:
            return False
