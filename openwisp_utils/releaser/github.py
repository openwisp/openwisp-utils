from openwisp_utils.utils import retryable_request


class GitHub:
    """A client for interacting with the GitHub API."""

    def __init__(self, token, repo):
        if not token:
            raise ValueError("GitHub token is required.")
        if not repo:
            raise ValueError("GitHub repository name (e.g., 'owner/repo') is required.")
        self.token = token
        self.repo = repo
        self.base_url = f"https://api.github.com/repos/{self.repo}"
        self.headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json",
        }

    def create_pr(self, head, base, title):
        """Creates a pull request on GitHub."""
        url = f"{self.base_url}/pulls"
        payload = {
            "title": title,
            "head": head,
            "base": base,
            "body": "This PR was automatically generated by the release script.",
        }
        response = retryable_request(
            url=url, method="POST", headers=self.headers, json=payload
        )
        response.raise_for_status()
        return response.json()["html_url"]

    def is_pr_merged(self, pr_url):
        """Checks if a pull request has been merged."""
        pr_number = pr_url.split("/")[-1]
        url = f"{self.base_url}/pulls/{pr_number}"
        response = retryable_request(url=url, method="GET", headers=self.headers)
        response.raise_for_status()
        return response.json().get("merged", False)

    def create_release(self, tag_name, title, body):
        """Creates a draft release on GitHub."""
        url = f"{self.base_url}/releases"
        payload = {
            "tag_name": tag_name,
            "name": title,
            "body": body,
            "draft": True,
            "prerelease": "alpha" in tag_name or "beta" in tag_name or "rc" in tag_name,
        }
        response = retryable_request(
            url=url, method="POST", headers=self.headers, json=payload
        )
        response.raise_for_status()
        return response.json()["html_url"]
